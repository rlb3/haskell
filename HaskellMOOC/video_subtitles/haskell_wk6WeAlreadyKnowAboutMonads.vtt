WEBVTT

00:00:00.000 --> 00:00:04.250 align:middle line:90%


00:00:04.250 --> 00:00:06.110 align:middle line:84%
JEREMY: Functional
programming languages

00:00:06.110 --> 00:00:09.330 align:middle line:84%
have a reputation
for being complex.

00:00:09.330 --> 00:00:12.550 align:middle line:84%
This is probably deserved,
but it's off-putting

00:00:12.550 --> 00:00:15.870 align:middle line:90%
to novice programmers.

00:00:15.870 --> 00:00:19.580 align:middle line:84%
One of the most intimidating
features about Haskell

00:00:19.580 --> 00:00:22.470 align:middle line:90%
is monads.

00:00:22.470 --> 00:00:26.460 align:middle line:84%
In this video we're going to
delve into them in more detail

00:00:26.460 --> 00:00:30.430 align:middle line:84%
to try and understand what
monads are really all about.

00:00:30.430 --> 00:00:33.320 align:middle line:84%
Firstly, cue some
relaxing music.

00:00:33.320 --> 00:00:38.290 align:middle line:90%


00:00:38.290 --> 00:00:41.780 align:middle line:84%
Now let's start off with
the following high level

00:00:41.780 --> 00:00:43.420 align:middle line:90%
definition.

00:00:43.420 --> 00:00:46.370 align:middle line:84%
Monads allow
sequencing of function

00:00:46.370 --> 00:00:50.430 align:middle line:84%
calls to be enforced
by the type system.

00:00:50.430 --> 00:00:51.890 align:middle line:90%
Is that enough?

00:00:51.890 --> 00:00:54.670 align:middle line:84%
Well, perhaps it's enough to
be getting on with for now.

00:00:54.670 --> 00:00:58.820 align:middle line:84%
Monads allow computations
to be chained together.

00:00:58.820 --> 00:01:02.225 align:middle line:84%
Effectively, a monad is
a computation pattern

00:01:02.225 --> 00:01:06.330 align:middle line:84%
as Katie from Facebook
told us last week.

00:01:06.330 --> 00:01:09.750 align:middle line:84%
To reassure you
further, we've already

00:01:09.750 --> 00:01:12.160 align:middle line:84%
encountered at least
two examples of monads

00:01:12.160 --> 00:01:14.870 align:middle line:90%
on the course.

00:01:14.870 --> 00:01:17.980 align:middle line:90%
The IO monad.

00:01:17.980 --> 00:01:21.020 align:middle line:84%
In week two of the course
we studied IO actions

00:01:21.020 --> 00:01:24.750 align:middle line:90%
like putStrLn and getLine.

00:01:24.750 --> 00:01:28.590 align:middle line:84%
We looked at the do construct
for sequencing these actions,

00:01:28.590 --> 00:01:32.010 align:middle line:84%
so the result of one IO
action could become the input

00:01:32.010 --> 00:01:34.730 align:middle line:90%
of a subsequent IO action.

00:01:34.730 --> 00:01:38.830 align:middle line:90%
For example, look at this code.

00:01:38.830 --> 00:01:44.760 align:middle line:84%
This is a use of the IO monad
wrapped up as a do block.

00:01:44.760 --> 00:01:48.100 align:middle line:90%
Secondly, the maybe monad.

00:01:48.100 --> 00:01:52.640 align:middle line:84%
In week three of the course
we studied maybe values, which

00:01:52.640 --> 00:01:55.970 align:middle line:90%
could be Just x or Nothing.

00:01:55.970 --> 00:01:59.200 align:middle line:84%
These are used to represent
values from computations

00:01:59.200 --> 00:02:01.270 align:middle line:90%
that may fail.

00:02:01.270 --> 00:02:04.380 align:middle line:84%
Again, we can use
do blocks to order

00:02:04.380 --> 00:02:07.450 align:middle line:84%
a sequence of computations
on maybe values.

00:02:07.450 --> 00:02:11.080 align:middle line:90%
This is the maybe monad.

00:02:11.080 --> 00:02:13.080 align:middle line:90%
Look at this block.

00:02:13.080 --> 00:02:14.395 align:middle line:90%
What value does it return?

00:02:14.395 --> 00:02:23.920 align:middle line:90%


00:02:23.920 --> 00:02:25.580 align:middle line:84%
Note that the
return keyword here

00:02:25.580 --> 00:02:29.040 align:middle line:84%
put the final computed value
in an appropriate context.

00:02:29.040 --> 00:02:33.060 align:middle line:90%
More details in the next step.

00:02:33.060 --> 00:02:34.966 align:middle line:90%
Here's another do block.

00:02:34.966 --> 00:02:38.550 align:middle line:90%


00:02:38.550 --> 00:02:41.160 align:middle line:90%
What value does it return?

00:02:41.160 --> 00:02:43.050 align:middle line:84%
The Nothing value
propagates through the

00:02:43.050 --> 00:02:46.760 align:middle line:90%
do block and is returned.

00:02:46.760 --> 00:02:50.760 align:middle line:84%
We are going to investigate
the properties of monads

00:02:50.760 --> 00:02:54.810 align:middle line:84%
over the next few steps on the
course to try and understand

00:02:54.810 --> 00:02:57.400 align:middle line:90%
them in some more detail.

00:02:57.400 --> 00:03:01.170 align:middle line:84%
However, I hope it's
moderately reassuring

00:03:01.170 --> 00:03:05.570 align:middle line:84%
to realize that we've already
encountered monads in Haskell

00:03:05.570 --> 00:03:09.560 align:middle line:84%
and understood
them at some level.

00:03:09.560 --> 00:03:12.447 align:middle line:90%